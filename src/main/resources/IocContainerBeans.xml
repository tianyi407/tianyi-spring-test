<?xml version="1.0" encoding="UTF-8"?>
<!-- http://www.springframework.org/schema/beans 默认命名空间：它没有空间名，用于Spring Bean的定义 -->
<!-- http://www.w3.org/2001/XMLSchema-instance xsi命名空间：这个命名空间用于为每个文档中命名空间指定相应的Schema样式文件，是标准组织定义的标准命名空间 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	<!-- 默认的作用域作为beans的属性来定义，所有的bean的init和destroy方法都会生效 -->
	<!-- default-init-method="init" default-destroy-method="destroy" -->


	<!-- 默认的作用域为 'singleton' -->
	<bean id="helloWorld" class="com.spring.ioc.container.bean.HelloWorldBean"
		init-method="init" destroy-method="destroy">
		<property name="message" value="Hello World by WangTianyi!" />
	</bean>

	<!-- 用scope定义作用域，单例 -->
	<bean id="scopeSingletonBean"
		class="com.spring.ioc.container.bean.ScopeSingletonBean" scope="singleton" />

	<!-- 用scope定义作用域，每次都新new -->
	<bean id="scopePrototypeBean"
		class="com.spring.ioc.container.bean.ScopePrototypeBean" scope="prototype" />

	<!-- 在default中声明了默认的init和destroy方法，又指定了单独的init2和destroy2方法，若一个class父子类两个方法都有，则都运行 -->
	<bean id="lifeCycleBean" class="com.spring.ioc.container.bean.LifeCycleBean"
		init-method="init2" destroy-method="destroy2">
		<property name="message" value="Life Cycle Bean Message!" />
	</bean>

	<!-- MainAppBeanAfterCtrl test -->
	<!-- <bean class="com.spring.ioc.container.bean.InitHelloWorldBean" /> -->

	<bean id="helloParent" class="com.spring.ioc.container.bean.HelloParentBean">
		<property name="message1" value="Hello Parent 1st!" />
		<property name="message2" value="Hello Parent 2nd!" />
	</bean>

	<!-- 定义子类，用parent声明父类 -->
	<bean id="helloChild" class="com.spring.ioc.container.bean.HelloChildBean"
		parent="helloParent">
		<property name="message1" value="Hello Child 1st!" />
		<property name="message3" value="Hello Child 3rd!" />
	</bean>

	<!-- 定义模板，指定abstract = true，不需要对应任何class -->
	<bean id="beanTeamplate" abstract="true">
		<property name="message1" value="Hello Teamplate 1st!" />
		<property name="message2" value="Hello Teamplate 2nd!" />
		<property name="message3" value="Hello Teamplate 3rd!" />
	</bean>

	<!-- 定义子类，继承模板 -->
	<bean id="helloChild2nd" class="com.spring.ioc.container.bean.HelloChildBean2nd"
		parent="beanTeamplate">
		<property name="message1" value="Hello Child 2nd 1st" />
		<property name="message3" value="Hello Child 2nd 3rd!" />
	</bean>

</beans>