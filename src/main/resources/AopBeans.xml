<?xml version="1.0" encoding="UTF-8"?>
<!-- http://www.springframework.org/schema/beans 默认命名空间：它没有空间名，用于Spring Bean的定义 -->
<!-- http://www.w3.org/2001/XMLSchema-instance xsi命名空间：这个命名空间用于为每个文档中命名空间指定相应的Schema样式文件，是标准组织定义的标准命名空间 -->
<!-- http://www.springframework.org/schema/p p-namespace，对于set函数依赖注入，传统的property 
	name ref，可以简写成p:name-ref=id 或 p:name=value -->
<!-- http://www.springframework.org/schema/context 要使用注解啦 -->
<!-- http://www.springframework.org/schema/aop 要是用aop啦 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 声明使用注解 -->
	<context:annotation-config />

	<bean id="aopTestBean" class="com.spring.aop.bean.AopTestBean">
		<property name="name" value="Tianyi" />
		<property name="age" value="35" />
	</bean>

	<bean id="aopLog" class="com.spring.aop.bean.AopLoggingXml" />

	<aop:config>
		<!-- aspect ref，指定要执行aop操作的class -->
		<aop:aspect id="aopLogAspect" ref="aopLog">

			<!-- pointcut 声明要执行aop操作的触发点 -->
			<aop:pointcut id="aopLogPoint"
				expression="execution(* com.spring.aop.bean.AopLoggingXml.*(..))" />
			<!--expression="execution(* com.spring.aop.bean.AopTestBean.getName(..))" 
				/> -->

			<!-- before 方法执行之前 -->
			<aop:before pointcut-ref="aopLogPoint"
				method="beforeAdvice" />

			<!-- after 方法执行之后，不考虑执行结果 -->
			<aop:after pointcut-ref="aopLogPoint" method="afterAdvice" />

			<!-- after-returning 方法成功执行完成后，void时retVal=null -->
			<aop:after-returning pointcut-ref="aopLogPoint"
				returning="retVal" method="afterReturningAdvice" />

			<!-- after-throwing 方法退出抛出异常时 -->
			<aop:after-throwing pointcut-ref="aopLogPoint"
				throwing="ex" method="AfterThrowingAdvice" />
		</aop:aspect>
	</aop:config>

	<!-- 声明使用aspectj 注解 -->
	<aop:aspectj-autoproxy />

	<bean id="aopTestBean2" class="com.spring.aop.bean.AopTestBean">
		<property name="name" value="Chenya" />
		<property name="age" value="29" />
	</bean>

	<bean id="aopLogAspectJ"
		class="com.spring.aop.bean.AopLoggingAspectJ" />

</beans>